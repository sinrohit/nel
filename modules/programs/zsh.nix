# modules/programs/zsh.nix
{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.programs.zsh;

  # Helper function for creating activation scripts
  mkActivationScript = name: text: deps: {
    inherit name text deps;
  };
in
{
  options = {
    programs.zsh = {
      enable = mkEnableOption "zsh shell";

      enableAutosuggestions = mkEnableOption "zsh autosuggestions";

      enableSyntaxHighlighting = mkEnableOption "zsh syntax highlighting";

      historySize = mkOption {
        type = types.int;
        default = 10000;
        description = "Number of history lines to keep in memory.";
      };

      histFile = mkOption {
        type = types.str;
        default = "$HOME/.zsh_history";
        description = "Location of the zsh history file.";
      };

      oh-my-zsh = {
        enable = mkEnableOption "oh-my-zsh";

        theme = mkOption {
          type = types.str;
          default = "robbyrussell";
          description = "The oh-my-zsh theme to use.";
        };

        plugins = mkOption {
          type = types.listOf types.str;
          default = [ ];
          description = "List of oh-my-zsh plugins to enable.";
        };
      };

      initExtra = mkOption {
        type = types.lines;
        default = "";
        description = "Extra commands that should be added to .zshrc.";
      };
    };
  };

  config = mkIf cfg.enable {
    # Add required packages
    environment.systemPackages = [ pkgs.zsh ]
      ++ lib.optional cfg.enableAutosuggestions pkgs.zsh-autosuggestions
      ++ lib.optional cfg.enableSyntaxHighlighting pkgs.zsh-syntax-highlighting
      ++ lib.optional cfg.oh-my-zsh.enable pkgs.oh-my-zsh;

    # Define the activation script for ZSH setup
    home.activationScripts.zshSetup = mkActivationScript "zshSetup" ''
            echo "Setting up ZSH configuration..."
      
            # Create .zshrc with all configurations
            cat > "$TMP_DIR/.zshrc" << 'EOL'
      # Generated by nix-env-loader

      # History configuration
      HISTSIZE=${toString cfg.historySize}
      HISTFILE=${cfg.histFile}
      SAVEHIST=${toString cfg.historySize}

      # Environment variables from configuration
      ${concatStringsSep "\n" (mapAttrsToList (name: value: 
        if builtins.isList value
        then "export ${name}=${concatStringsSep ":" value}"
        else "export ${name}=${value}"
      ) config.environment.variables)}

      # Shell aliases
      ${concatStringsSep "\n" (mapAttrsToList (name: value: 
        "alias ${name}='${value}'"
      ) config.environment.shellAliases)}

      ${optionalString cfg.oh-my-zsh.enable ''
      # Oh-My-Zsh configuration
      export ZSH=${pkgs.oh-my-zsh}/share/oh-my-zsh
      ZSH_THEME="${cfg.oh-my-zsh.theme}"
      plugins=(${concatStringsSep " " cfg.oh-my-zsh.plugins})
      source $ZSH/oh-my-zsh.sh
      ''}

      ${optionalString cfg.enableAutosuggestions ''
      # Zsh autosuggestions
      source ${pkgs.zsh-autosuggestions}/share/zsh-autosuggestions/zsh-autosuggestions.zsh
      ''}

      ${optionalString cfg.enableSyntaxHighlighting ''
      # Zsh syntax highlighting
      source ${pkgs.zsh-syntax-highlighting}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
      ''}

      # User's extra configurations
      ${cfg.initExtra}
      EOL
    '' [ "homeFiles" ];
  };
}
