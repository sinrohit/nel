# modules/programs/zsh.nix
{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.programs.zsh;
in {
  config = mkIf cfg.enable {
    environment.systemPackages = [ pkgs.zsh ]
      ++ lib.optional cfg.enableAutosuggestions pkgs.zsh-autosuggestions
      ++ lib.optional cfg.enableSyntaxHighlighting pkgs.zsh-syntax-highlighting
      ++ lib.optional cfg.oh-my-zsh.enable pkgs.oh-my-zsh;
    
    # Generate .zshrc file
    home.file.".zshrc".text = ''
      # Generated by nix-env-loader
      
      # History configuration
      HISTSIZE=${toString cfg.historySize}
      HISTFILE=${cfg.histFile}
      SAVEHIST=${toString cfg.historySize}
      
      # Environment variables from configuration
      ${concatStringsSep "\n" (mapAttrsToList (name: value: 
        if builtins.isList value
        then "export ${name}=${concatStringsSep ":" value}"
        else "export ${name}=${value}"
      ) config.environment.variables)}
      
      # Shell aliases
      ${concatStringsSep "\n" (mapAttrsToList (name: value: 
        "alias ${name}='${value}'"
      ) config.environment.shellAliases)}
      
      ${optionalString cfg.oh-my-zsh.enable ''
      # Oh-My-Zsh configuration
      export ZSH=${pkgs.oh-my-zsh}/share/oh-my-zsh
      ZSH_THEME="${cfg.oh-my-zsh.theme}"
      plugins=(${concatStringsSep " " cfg.oh-my-zsh.plugins})
      source $ZSH/oh-my-zsh.sh
      ''}
      
      ${optionalString cfg.enableAutosuggestions ''
      # Zsh autosuggestions
      source ${pkgs.zsh-autosuggestions}/share/zsh-autosuggestions/zsh-autosuggestions.zsh
      ''}
      
      ${optionalString cfg.enableSyntaxHighlighting ''
      # Zsh syntax highlighting
      source ${pkgs.zsh-syntax-highlighting}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
      ''}
      
      # User's extra configurations
      ${cfg.initExtra}
    '';
  };
}
